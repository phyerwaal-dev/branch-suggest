{"version":3,"sources":["Web_bg.png","phyerwaal_dev_logo_final.png","Components/Home.js","Pages/Main.js","Pages/dev.js","Components/Questions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CallToActionIntro","state","collapsed","handleTogglerClick","setState","document","querySelector","style","height","this","overlay","id","backgroundColor","onClick","color","marginTop","light","expand","fixed","scrolling","transparent","href","isOpen","navbar","right","active","to","src","logo","width","paddingTop","className","md","fluid","Date","getFullYear","React","Component","Main","Home","Developers","align","alt","Row","Col","sm","Questions","radio","nr","questions","map","question","index","App","exact","path","component","Developer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4656bf2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Web_bg.f2e4e6ab.png\";","module.exports = __webpack_public_path__ + \"static/media/phyerwaal_dev_logo_final.fad90657.png\";","import React from 'react';\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBNavbarToggler,\r\n    MDBCollapse,\r\n    MDBMask,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBView,\r\n    MDBContainer,\r\n    MDBFooter,\r\n} from 'mdbreact';\r\nimport '../home.css';\r\nimport logo from '../Web_bg.png';\r\n\r\nclass CallToActionIntro extends React.Component {\r\n    state = {\r\n        collapsed: false\r\n    };\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.querySelector('nav').style.height = '65px';\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector('nav').style.height = 'auto';\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: '2rem' };\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'transparent' }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id='caltoaction'>\r\n                <div>\r\n                    <MDBNavbar\r\n                        color='secondary-color'\r\n                        style={navStyle}\r\n                        light\r\n                        expand='md'\r\n                        fixed='top'\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/career/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem active>\r\n                                        <MDBNavLink to='#!'>About Us</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/career/dev'>Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={logo}>\r\n                    <MDBContainer\r\n                        style={{ height: '100%', width: '100%', paddingTop: '12rem' }}\r\n                        className='d-flex justify-content-center align-items-center'\r\n                    >\r\n                        <MDBRow>\r\n                            <MDBCol md='12' className='mb-4 text-center'>\r\n                                <h1 className='display-4 font-weight-bold mb-0 pt-md-5 pt-5'>\r\n                                    Find Your Interested Branch\r\n                                </h1>\r\n                                <h4 className='pt-md-1 pt-sm-2 pt-1 pb-md-3 pb-sm-3 pb-3'>\r\n                                    Confusion is <strong>Temperary</strong>, Interest is <strong>Permanent</strong>\r\n                                </h4>\r\n                                <MDBBtn color=\"success\" href=\"/questions\">Let Us Help</MDBBtn>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                    <MDBFooter>\r\n                        <div className=\"footer-copyright text-center\" style={{ paddingTop: '8rem' }}>\r\n                            <MDBContainer fluid>\r\n                                &copy; {new Date().getFullYear()} Phyerwaal Dev\r\n                        </MDBContainer>\r\n                        </div>\r\n                    </MDBFooter>\r\n                </MDBView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CallToActionIntro;","import React from 'react';\r\nimport Home from '../Components/Home';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div>\r\n            <Home />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport '../CSS/dev.css';\r\nimport logo from '../phyerwaal_dev_logo_final.png';\r\n\r\nexport default function Developers() {\r\n    return (\r\n        <section id=\"dev-section\">\r\n            <div className=\"header\" align=\"center\">\r\n                <p align=\"center\" className=\"dev\">\r\n                    Developed By\r\n                </p>\r\n                <img src={logo} alt=\"Phyerwaal_Dev\" />\r\n                <Row className=\"dev-details\">\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Tejas Raibagi</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Prasad Jadhav</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Sujoy Dev</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Aseem Godambe</h1>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React from 'react';\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardTitle, MDBFooter, MDBRow, MDBView, MDBContainer, MDBCol, MDBNavbar, MDBNavbarBrand, MDBNavbarToggler, MDBCollapse, MDBNavbarNav, MDBNavItem, MDBNavLink } from 'mdbreact';\r\nimport '../question.css'\r\nimport questions from '../data/questions.json';\r\nimport logo from '../Web_bg.png';\r\n\r\nclass Questions extends React.Component {\r\n    state = {\r\n        collapsed: false,\r\n        radio: 0\r\n    };\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed\r\n        });\r\n    };\r\n\r\n    onClick = (nr) => () => {\r\n        this.setState({\r\n            radio: nr\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.querySelector('nav').style.height = '65px';\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector('nav').style.height = 'auto';\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: '2rem' };\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'white' }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id=\"questions\">\r\n                <div>\r\n                    <MDBNavbar\r\n                        color='secondary-color'\r\n                        style={navStyle}\r\n                        light\r\n                        expand='md'\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem active>\r\n                                        <MDBNavLink to='#!'>About Us</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/dev'>Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={logo}>\r\n                    <MDBContainer\r\n                        style={{ height: '100%', width: '100%', paddingTop: '5rem' }}\r\n                        className='d-flex justify-content-center align-items-center'>\r\n                        <MDBRow>\r\n                            <h1 className=\"display-10 font-weight-bold\">QUESTIONS</h1>\r\n                            <MDBCard style={{ width: \"100%\" }}>\r\n                                {questions.map((question, index) => {\r\n                                    return (\r\n                                        <div className=\"card\">\r\n                                            <MDBCardBody>\r\n                                                <MDBCardTitle>Q{index + 1}. {question.question}</MDBCardTitle>\r\n                                            </MDBCardBody>\r\n                                            <hr></hr>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </MDBCard>\r\n                            <div className=\"send-btn\">\r\n                                <MDBBtn color=\"success\" >SEND ANSWER</MDBBtn>\r\n                            </div>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                </MDBView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Questions;","import React from 'react';\nimport Main from './Pages/Main';\nimport Developer from './Pages/dev';\nimport Questions from './Components/Questions';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/career/\" component={Main} />\n        <Route exact path=\"/career/dev\" component={Developer} />\n        <Route exact path=\"/career/questions\" component={Questions} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}