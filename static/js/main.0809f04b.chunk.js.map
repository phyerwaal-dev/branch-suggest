{"version":3,"sources":["Components/Home.js","Pages/Main.js","Pages/dev.js","Components/Questions.js","Components/Result.js","Components/UserDetails.js","App.js","serviceWorker.js","Reducer/index.js","index.js","Web_bg.png","phyerwaal_dev_logo_final.png"],"names":["Home","state","collapsed","handleTogglerClick","setState","document","querySelector","style","height","this","overlay","id","backgroundColor","onClick","color","marginTop","light","expand","fixed","scrolling","transparent","href","isOpen","navbar","right","active","to","src","bg","width","paddingTop","className","sm","md","animationDelay","fluid","Date","getFullYear","React","Component","Main","Developers","align","logo","alt","Row","Col","Questions","props","nr","radio","onChoose","x","val","a","console","log","data","parseInt","question","selection","select","options","opt","new_selection","map","i","key","push","nextValidate","error","msg","err","current","length","validate","axios","post","sort","b","then","response","storeResponse","history","catch","loading","questions","xxx","shuffle","arra1","temp","index","ctr","Math","floor","random","includes","display","oindex","required","type","label","e","target","checked","Array","from","connect","user","dispatch","series","useState","UserDetails","changeHandler","event","name","value","send","email","preventDefault","add","userData","bind","xs","Form","Group","controlId","Label","Control","placeholder","onChange","Text","App","exact","path","component","Developer","Results","Boolean","window","location","hostname","match","initState","colors","plotOptions","bar","columnWidth","distributed","chart","toolbar","show","xaxis","categories","rootReducer","action","probab","probabilities","prob","round","middleware","thunk","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"uVAqIeA,E,4MAhHbC,MAAQ,CACNC,WAAW,G,EAGbC,mBAAqB,WAAO,IAClBD,EAAc,EAAKD,MAAnBC,UACR,EAAKE,SAAS,CACZF,WAAYA,K,kEAKdG,SAASC,cAAc,OAAOC,MAAMC,OAAS,S,6CAI7CH,SAASC,cAAc,OAAOC,MAAMC,OAAS,S,+BAGrC,IACAN,EAAcO,KAAKR,MAAnBC,UAEFQ,EACJ,yBACEC,GAAG,kBACHJ,MAAO,CAAEK,gBAAiB,eAC1BC,QAASJ,KAAKN,qBAGlB,OACE,yBAAKQ,GAAG,eACN,6BACE,kBAAC,IAAD,CACEG,MAAM,kBACNP,MAbS,CAAEQ,UAAW,QActBC,OAAK,EACLC,OAAO,KACPC,MAAM,MACNC,WAAS,EACTC,aAAW,GAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBC,KAAK,KACnB,iDAEF,kBAAC,IAAD,CAAkBR,QAASJ,KAAKN,qBAChC,kBAAC,IAAD,CAAamB,OAAQpB,EAAWqB,QAAM,GACpC,kBAAC,IAAD,CAAcC,OAAK,GACjB,kBAAC,IAAD,CAAYC,QAAM,GAChB,kBAAC,IAAD,CAAYC,GAAG,KAAf,SAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,QAAf,mBAMTxB,GAAaQ,GAEhB,kBAAC,IAAD,CAASiB,IAAKC,KACZ,kBAAC,IAAD,CACErB,MAAO,CAAEC,OAAQ,OAAQqB,MAAO,OAAQC,WAAY,SACpDC,UAAU,oDAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,GAAG,IAAIC,GAAG,KAAKF,UAAU,oBAC/B,wBACEA,UAAU,0DACVxB,MAAO,CAAE2B,eAAgB,QAF3B,+BAMA,wBACEH,UAAU,uDACVxB,MAAO,CAAE2B,eAAgB,QAF3B,gBAIe,4BAAQH,UAAU,aAAlB,aAJf,iBAKc,4BAAQA,UAAU,aAAlB,cAEd,kBAAC,IAAD,CAASL,GAAG,gBACV,kBAAC,IAAD,CACEZ,MAAM,UACNiB,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,OAH3B,mBAWR,kBAAC,IAAD,KACE,yBACEH,UAAU,+BACVxB,MAAO,CAAEuB,WAAY,SAErB,kBAAC,IAAD,CACEK,OAAK,EACLJ,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,SAH3B,SAKU,IAAIE,MAAOC,cALrB,0B,GAlGKC,IAAMC,WCTVC,MARf,WACI,OACI,6BACI,kBAAC,EAAD,Q,4CCDG,SAASC,IACpB,OACI,6BAAS9B,GAAG,eACR,yBAAKoB,UAAU,SAASW,MAAM,UAC1B,uBAAGA,MAAM,SAASX,UAAU,OAA5B,gBAGA,yBAAKJ,IAAKgB,IAAMC,IAAI,kBACpB,kBAACC,EAAA,EAAD,CAAKd,UAAU,eACX,kBAACe,EAAA,EAAD,CAAKd,GAAI,GAAIC,GAAI,GACb,wBAAIF,UAAU,QAAd,kBAEJ,kBAACe,EAAA,EAAD,CAAKd,GAAI,GAAIC,GAAI,GACb,wBAAIF,UAAU,QAAd,kBAEJ,kBAACe,EAAA,EAAD,CAAKd,GAAI,GAAIC,GAAI,GACb,wBAAIF,UAAU,QAAd,cAEJ,kBAACe,EAAA,EAAD,CAAKd,GAAI,GAAIC,GAAI,GACb,wBAAIF,UAAU,QAAd,qB,+ECGlBgB,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeR7C,mBAAqB,WAAO,IAClBD,EAAc,EAAKD,MAAnBC,UACR,EAAKE,SAAS,CACZF,WAAYA,KAnBG,EAuBnBW,QAAU,SAACoC,GAAD,OAAQ,WAChB,EAAK7C,SAAS,CACZ8C,MAAOD,MAzBQ,EAyDnBE,SAzDmB,uCAyDR,WAAOxC,EAAIyC,EAAGC,GAAd,iBAAAC,EAAA,6DACTC,QAAQC,IAAI7C,EAAIyC,EAAGC,GACfI,EAAO,CACT9C,GAAI+C,SAAS/C,GACb0C,IAAKA,EACLM,SAAU,EAAK1D,MAAM2D,UAAUR,GAAGO,SAClCE,OAAQC,EAAQT,GAAKU,KAEvBR,QAAQC,IAAIC,GACRO,EAAgB,GATX,SAWH,EAAK/D,MAAM2D,UAAUK,KAAI,SAACC,EAAGC,GAC7BD,EAAEvD,KAAO8C,EAAK9C,IAAI4C,QAAQC,IAAIU,GAClCA,EAAEvD,IAAM8C,EAAK9C,GACTqD,EAAcI,KAAKX,GACnBO,EAAcI,KAAK,CACnBzD,GAAIuD,EAAEvD,GACN0C,IAAKa,EAAEb,IACPM,SAAUO,EAAEP,SACZE,OAAQK,EAAEL,YAnBP,uBAsBH,EAAKzD,SAAS,CAAEwD,UAAWI,IAtBxB,OAuBTT,QAAQC,IAAI,EAAKvD,MAAM2D,WAvBd,2CAzDQ,4DAmFnBS,aAnFmB,sBAmFJ,8BAAAf,EAAA,sEACP,EAAKlD,SAAS,CAClBkE,MAAO,EACPC,IAAK,KAHM,OAMb,IADIC,EAAM,EACDN,EAAI,EAAGA,GAAK,EAAKjE,MAAMwE,QAAQC,OAAS,EAAGR,IACK,MAAnD,EAAKjE,MAAM2D,UAAU,EAAK3D,MAAMwE,QAAQP,IAAIb,MAC9CmB,GAAY,GAIZA,EAAM,EACR,EAAKpE,SAAS,CACZkE,MAAOE,EACPD,IAAK,mCAGP,EAAKnE,SAAS,CACZkE,MAAO,EACPC,IAAK,KApBI,2CAnFI,EA4GnBI,SA5GmB,sBA4GR,sBAAArB,EAAA,sEACH,EAAKe,eADF,OAETd,QAAQC,IAAI,UAAY,EAAKvD,MAAMqE,OACX,GAApB,EAAKrE,MAAMqE,OACbM,IACGC,KAAK,yDAA0D,CAC9DpB,KAAM,EAAKxD,MAAM2D,UAAUkB,MAAK,SAAUxB,EAAGyB,GAC3C,OAAOzB,EAAE3C,GAAKoE,EAAEpE,QAGnBqE,MAAK,SAACC,GACL,EAAKjC,MAAMkC,cAAcD,EAASxB,MAClC,EAAKT,MAAMmC,QAAQf,KAAK,eAEzBgB,OAAM,SAAUd,GACff,QAAQC,IAAIc,MAfT,2CAzGT,EAAKrE,MAAQ,CACXwE,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GACtBY,SAAS,EACTnF,WAAW,EACXqE,IAAK,GACLD,MAAO,EACPV,UAAW0B,EAAUrB,KAAI,SAACC,EAAGC,GAE3B,MADW,CAAExD,GAAIuD,EAAEvD,GAAIgD,SAAUO,EAAEP,SAAUN,IAAK,KAAMQ,OAAQ,UAVnD,E,iEA6BjB,IAAI0B,EAAM9E,KAAK+E,QAAQ/E,KAAKR,MAAM2D,WAClCL,QAAQC,IAAI+B,GACZ9E,KAAKL,SAAS,CAAEwD,UAAW2B,M,0CAI3BlF,SAASC,cAAc,OAAOC,MAAMC,OAAS,S,6CAI7CH,SAASC,cAAc,OAAOC,MAAMC,OAAS,S,8BAGvCiF,GAKN,IAJA,IACEC,EACAC,EAFEC,EAAMH,EAAMf,OAITkB,EAAM,GACXD,EAAQE,KAAKC,MAAMD,KAAKE,SAAWH,GAEnCF,EAAOD,IADPG,GAEAH,EAAMG,GAAOH,EAAME,GACnBF,EAAME,GAASD,EAEjB,OAAOD,I,+BA0EC,IAAD,OACCvF,EAAcO,KAAKR,MAAnBC,UAEFQ,EACJ,yBACEC,GAAG,kBACHJ,MAAO,CAAEK,gBAAiB,SAC1BC,QAASJ,KAAKN,qBAGlB,OACE,yBAAKQ,GAAG,aACN,yBAAKoB,UAAU,cACb,kBAAC,IAAD,CACEjB,MAAM,kBACNP,MAbS,CAAEQ,UAAW,QActBC,OAAK,EACLC,OAAO,KACPE,WAAS,EACTC,aAAW,GAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBC,KAAK,KACnB,iDAEF,kBAAC,IAAD,CAAkBR,QAASJ,KAAKN,qBAChC,kBAAC,IAAD,CAAamB,OAAQpB,EAAWqB,QAAM,GACpC,kBAAC,IAAD,CAAcC,OAAK,GACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYE,GAAG,KAAf,SAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,QAAf,mBAMTxB,GAAaQ,GAEhB,kBAAC,IAAD,CAASiB,IAAKgB,KACZ,kBAAC,IAAD,CACEpC,MAAO,CAAEC,OAAQ,OAAQqB,MAAO,OAAQC,WAAY,QACpDC,UAAU,oDAEV,kBAAC,IAAD,KACE,wBACEA,UAAU,yDACVxB,MAAO,CAAE2B,eAAgB,QAF3B,aAMA,kBAAC,IAAD,CAAS3B,MAAO,CAAEsB,MAAO,SACtBpB,KAAKR,MAAM2D,UAAUK,KAAI,SAACN,EAAUgC,GACnC,OACE,yBACE5D,UAAU,kBACVxB,MACE,EAAKN,MAAMwE,QAAQuB,SAASL,GACxB,CAAEM,QAAS,QAAS/D,eAAgB,OACpC,CAAE+D,QAAS,OAAQ/D,eAAgB,QAGzC,kBAAC,IAAD,KACE,kBAAC,IAAD,SACIyD,EAAQ,EADZ,KACiBhC,EAASA,UAEzBG,EAAQG,KAAI,SAACF,EAAKmC,GACjB,OACE,kBAAC,IAAD,CAAcnE,UAAU,QACtB,kBAAC,IAAD,CACEoC,IAAK+B,EACLC,UAAQ,EACRC,KAAK,QACLC,MAAOtC,EAAIA,IACXpD,GAAIgD,EAAShD,GACbE,QAAS,SAACyF,GACR,EAAKnD,SAASmD,EAAEC,OAAO5F,GAAIgF,EAAO5B,EAAIV,MAExCmD,QACE,EAAKvG,MAAM2D,UAAU+B,GAAOtC,KAAOU,EAAIV,WASnD,kCAKR,yBACEtB,UAAU,sBACVxB,MAAO,CAAE2B,eAAgB,OAEzB,wBAAIH,UAAU,uDACXtB,KAAKR,MAAMsE,KAEb9D,KAAKR,MAAMwE,QAAQ,IAAM,EAAI,KAC5B,kBAAC,IAAD,CACE3D,MAAM,UACND,QAAS,WACP,EAAKT,SAAS,CACZmE,IAAK,GACLE,QAASgC,MAAMC,KAAK,EAAKzG,MAAMwE,SAAS,SAACrB,GAAD,OAAOA,EAAI,SALzD,QAaD3C,KAAKR,MAAMwE,QAAQ,IAAMhE,KAAKR,MAAM2D,UAAUc,OAAS,EACtD,kBAAC,IAAD,CAAQ5D,MAAM,UAAUD,QAASJ,KAAKkE,UAAtC,eAIE,kBAAC,IAAD,CACE7D,MAAM,UACND,QAAO,sBAAE,sBAAAyC,EAAA,sEACD,EAAKe,eADJ,UAEiB,GAApB,EAAKpE,MAAMqE,MAFR,gCAGC,EAAKlE,SAAS,CAClBqE,QAASgC,MAAMC,KAAK,EAAKzG,MAAMwE,SAAS,SAACrB,GAAD,OAAOA,EAAI,OAJhD,OAMPG,QAAQC,IAAI,EAAKvD,MAAMwE,SANhB,4CAFX,iB,GAzPInC,IAAMC,WA6RfoE,eAJS,SAAC1G,GAAD,MAAY,CAClC2G,KAAM3G,EAAM2G,SATa,SAACC,GAC1B,MAAO,CACL3B,cAAe,SAACD,GACd4B,EAAS,CAAET,KAAM,cAAenB,SAAUA,QASjC0B,CAA6C5D,G,yBChR7C4D,G,OAAAA,aANS,SAAC1G,GAAD,MAAY,CAElC6D,QAAS7D,EAAM6D,QACfgD,OAAQ7G,EAAM6G,UAGDH,EAjCA,SAAC,GAAyB,IAAvB7C,EAAsB,EAAtBA,QAASgD,EAAa,EAAbA,OAAa,EACVC,qBADU,6BAGtC,OACE,yBAAKhF,UAAU,MAAMW,MAAM,UACzB,kBAACI,EAAA,EAAD,CAAKf,UAAU,6CACb,wBAAIA,UAAU,gBAAd,YAEF,kBAACe,EAAA,EAAD,KACE,yBAAKf,UAAU,eACZ+E,EACC,kBAAC,IAAD,CAAOhD,QAASA,EAASgD,OAAQA,EAAQV,KAAK,MAAMvE,MAAM,QACxD,MAEN,uBAAGa,MAAM,UAAT,sFAIA,uBAAGA,MAAM,UAAT,uCACA,kBAAC,IAAD,CAAShB,GAAG,KACV,kBAAC,IAAD,CAAQZ,MAAM,WAAd,e,kECXJkG,E,kDACF,WAAYhE,GAAQ,IAAD,8BACf,cAAMA,IAaV7C,mBAAqB,WAAO,IAChBD,EAAc,EAAKD,MAAnBC,UACR,EAAKE,SAAS,CACVF,WAAYA,KAjBD,EAqBnB+G,cAAgB,SAACC,GACb,EAAK9G,SAAL,eACK8G,EAAMX,OAAOY,KAAOD,EAAMX,OAAOa,SAvBvB,EA2BnBC,KA3BmB,uCA2BZ,WAAOH,GAAP,eAAA5D,EAAA,yDACH,EAAKlD,SAAS,CACVoE,IAAK,KAETjB,QAAQC,IAAI,SAAU,EAAKvD,MAAMkH,MACjC5D,QAAQC,IAAI,UAAW,EAAKvD,MAAMqH,OAClCJ,EAAMK,iBAEiB,IAAnB,EAAKtH,MAAMkH,MAAkC,IAApB,EAAKlH,MAAMqH,MARrC,wBASKE,EAAM,CACN,CACIL,KAAM,EAAKlH,MAAMkH,KACjBG,MAAO,EAAKrH,MAAMqH,QAZ3B,SAeO,EAAKtE,MAAMyE,SAASD,GAf3B,OAgBC,EAAKxE,MAAMmC,QAAQf,KAAK,cACxBb,QAAQC,IAAI,gBAAiB,EAAKR,MAAM4D,MAjBzC,wBAoBC,EAAKxG,SAAS,CACVoE,IAAK,uCArBV,4CA3BY,sDAGf,EAAKvE,MAAQ,CACTC,WAAW,EACXiH,KAAM,GACNG,MAAO,GACP9C,IAAK,IAGT,EAAKyC,cAAgB,EAAKA,cAAcS,KAAnB,gBACrB,EAAKL,KAAO,EAAKA,KAAKK,KAAV,gBAXG,E,gEAsDfrH,SAASC,cAAc,OAAOC,MAAMC,OAAS,S,6CAI7CH,SAASC,cAAc,OAAOC,MAAMC,OAAS,S,+BAGvC,IACEN,EAAcO,KAAKR,MAAnBC,UAEFQ,EACF,yBACIC,GAAG,kBACHJ,MAAO,CAAEK,gBAAiB,SAC1BC,QAASJ,KAAKN,qBAItB,OACI,6BAASQ,GAAG,eACR,yBAAKoB,UAAU,cACX,kBAAC,IAAD,CACIjB,MAAM,kBACNP,MAdC,CAAEQ,UAAW,QAedC,OAAK,EACLC,OAAO,KACPE,WAAS,EACTC,aAAW,GAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAgBC,KAAK,KACjB,iDAEJ,kBAAC,IAAD,CAAkBR,QAASJ,KAAKN,qBAChC,kBAAC,IAAD,CAAamB,OAAQpB,EAAWqB,QAAM,GAClC,kBAAC,IAAD,CAAcC,OAAK,GACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYE,GAAG,KAAf,SAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYA,GAAG,QAAf,mBAMnBxB,GAAaQ,GAElB,wBAAIqB,UAAU,0BAA0BW,MAAM,UAA9C,4CAGA,kBAAC,IAAD,CACIiF,GAAI,GACJ1F,GAAI,EACJF,UAAU,6CAEV,kBAAC,IAAD,KACI,kBAAC6F,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAACF,EAAA,EAAKG,MAAN,CACIhG,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,SAF7B,aAMA,kBAAC0F,EAAA,EAAKI,QAAN,CACIjG,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,QACzBkE,KAAK,OACL6B,YAAY,YACZC,SAAUzH,KAAKwG,cACfE,KAAK,UAGb,kBAACS,EAAA,EAAD,CAAM7F,UAAU,cACZ,kBAAC6F,EAAA,EAAKC,MAAN,CACIC,UAAU,iBACVvH,MAAO,CAAE2B,eAAgB,SAEzB,kBAAC0F,EAAA,EAAKG,MAAN,CACIhG,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,SAF7B,iBAMA,kBAAC0F,EAAA,EAAKI,QAAN,CACIjG,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,QACzBkE,KAAK,QACL6B,YAAY,cACZC,SAAUzH,KAAKwG,cACfE,KAAK,UAET,kBAACS,EAAA,EAAKO,KAAN,CACIpG,UAAU,wBACVxB,MAAO,CAAE2B,eAAgB,SAF7B,mDAOJ,uBAAGQ,MAAM,SAASX,UAAU,UAAUtB,KAAKR,MAAMuE,KACjD,uBACI9B,MAAM,SACNX,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,SAEzB,kBAAC,IAAD,CAAQpB,MAAM,UAAUD,QAASJ,KAAK4G,MAAtC,cAOhB,uBACI3E,MAAM,SACNX,UAAU,aACVxB,MAAO,CAAE2B,eAAgB,SAH7B,uI,GAvKUI,IAAMC,WAgMjBoE,eAJS,SAAC1G,GAAD,MAAY,CAChC2G,KAAM3G,EAAM2G,SATW,SAACC,GACxB,MAAO,CACHY,SAAU,SAACb,GACPC,EAAS,CAAET,KAAM,YAAaQ,KAAMA,QASjCD,CAA6CK,GC1L7CoB,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/F,IACjC,kBAAC,IAAD,CAAO6F,OAAK,EAACC,KAAK,OAAOC,UAAWC,IACpC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,aAAaC,UAAWxF,IAC1C,kBAAC,IAAD,CAAOsF,OAAK,EAACC,KAAK,WAAWC,UAAWE,IACxC,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,eAAeC,UAAWvB,OCJhC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBAC,G,OAAY,CACdjF,QAAS,CACLkF,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,WACrDC,YAAa,CACTC,IAAK,CACDC,YAAa,MACbC,aAAa,IAGrBC,MAAO,CACHC,QAAS,CACLC,MAAM,GAEV5I,GAAI,aAER6I,MAAO,CACHC,WAAY,CAAC,QAAS,YAAa,OAAQ,KAAM,gBAGzD3C,OAAQ,CACJ,CACIK,KAAM,gBACN1D,KAAM,KAGdmD,KAAM,KA0BK8C,EAvBK,WAAgC,IAA/BzJ,EAA8B,uDAAtB8I,EAAWY,EAAW,uCAC/C,GAAmB,eAAfA,EAAOvD,KAAuB,CAC9B,IAAIwD,EAASD,EAAO1E,SAAS4E,cAAc5F,KAAI,SAAC6F,GAC5C,OAAOjE,KAAKkE,MAAa,IAAPD,MAEtB,OAAO,2BACA7J,GADP,IAEI6G,OAAQ,CAAC,CACLK,KAAM,iBACN1D,KAAMmG,MAIb,GAAmB,aAAfD,EAAOvD,KAAqB,CACjC,IAAIqB,EAAWkC,EAAO/C,KACtB,OAAO,2BACA3G,GADP,IAEI2G,KAAMa,IAGd,OAAOxH,GCvCL+J,EAAa,C,MAACC,GAQdC,GANc,kBAAXvB,QAAuBA,OAAOwB,qCACjCxB,OAAOwB,qCAAqC,IAG5CC,KAGJC,IAAe,WAAf,EAAmBL,IAGfM,EAAQC,YAAYb,EAAaQ,GAEvCM,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFjK,SAASqK,eAAe,SFsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7F,MAAK,SAAA8F,GACJA,EAAaC,gBAEd3F,OAAM,SAAAd,GACLf,QAAQe,MAAMA,EAAM0G,a,mBGzI5BC,EAAOC,QAAU,IAA0B,oC,+MCA3CD,EAAOC,QAAU,IAA0B,sD","file":"static/js/main.0809f04b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBBtn,\r\n  MDBView,\r\n  MDBContainer,\r\n  MDBFooter,\r\n  MDBLink,\r\n} from \"mdbreact\";\r\nimport \"../home.css\";\r\nimport bg from \"../Web_bg.png\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    collapsed: false,\r\n  };\r\n\r\n  handleTogglerClick = () => {\r\n    const { collapsed } = this.state;\r\n    this.setState({\r\n      collapsed: !collapsed,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.querySelector(\"nav\").style.height = \"65px\";\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.querySelector(\"nav\").style.height = \"auto\";\r\n  }\r\n\r\n  render() {\r\n    const { collapsed } = this.state;\r\n    const navStyle = { marginTop: \"2rem\" };\r\n    const overlay = (\r\n      <div\r\n        id='sidenav-overlay'\r\n        style={{ backgroundColor: \"transparent\" }}\r\n        onClick={this.handleTogglerClick}\r\n      />\r\n    );\r\n    return (\r\n      <div id='caltoaction'>\r\n        <div>\r\n          <MDBNavbar\r\n            color='secondary-color'\r\n            style={navStyle}\r\n            light\r\n            expand='md'\r\n            fixed='top'\r\n            scrolling\r\n            transparent\r\n          >\r\n            <MDBContainer>\r\n              <MDBNavbarBrand href='/'>\r\n                <strong>APSIT Career</strong>\r\n              </MDBNavbarBrand>\r\n              <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n              <MDBCollapse isOpen={collapsed} navbar>\r\n                <MDBNavbarNav right>\r\n                  <MDBNavItem active>\r\n                    <MDBNavLink to='/'>Home</MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink to='/dev'>Developers</MDBNavLink>\r\n                  </MDBNavItem>\r\n                </MDBNavbarNav>\r\n              </MDBCollapse>\r\n            </MDBContainer>\r\n          </MDBNavbar>\r\n          {collapsed && overlay}\r\n        </div>\r\n        <MDBView src={bg}>\r\n          <MDBContainer\r\n            style={{ height: \"100%\", width: \"100%\", paddingTop: \"12rem\" }}\r\n            className='d-flex justify-content-center align-items-center'\r\n          >\r\n            <MDBRow>\r\n              <MDBCol sm='4' md='12' className='mb-4 text-center'>\r\n                <h1\r\n                  className='display-4 font-weight-bold mb-0 pt-md-5 pt-5 fadeInDown'\r\n                  style={{ animationDelay: \".5s\" }}\r\n                >\r\n                  Find Your Interested Branch\r\n                </h1>\r\n                <h4\r\n                  className='pt-md-1 pt-sm-2 pt-1 pb-md-3 pb-sm-3 pb-3 fadeInDown'\r\n                  style={{ animationDelay: \".7s\" }}\r\n                >\r\n                  Confusion is <strong className='highlight'>Temporary</strong>,\r\n                  Interest is <strong className='highlight'>Permanent</strong>\r\n                </h4>\r\n                <MDBLink to='/add_details'>\r\n                  <MDBBtn\r\n                    color='success'\r\n                    className='fadeInDown'\r\n                    style={{ animationDelay: \"1s\" }}\r\n                  >\r\n                    Let Us Help\r\n                  </MDBBtn>\r\n                </MDBLink>\r\n              </MDBCol>\r\n            </MDBRow>\r\n          </MDBContainer>\r\n          <MDBFooter>\r\n            <div\r\n              className='footer-copyright text-center'\r\n              style={{ paddingTop: \"8rem\" }}\r\n            >\r\n              <MDBContainer\r\n                fluid\r\n                className='fadeInDown'\r\n                style={{ animationDelay: \"1.2s\" }}\r\n              >\r\n                &copy; {new Date().getFullYear()} Phyerwaal Dev\r\n              </MDBContainer>\r\n            </div>\r\n          </MDBFooter>\r\n        </MDBView>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Home from '../Components/Home';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div>\r\n            <Home />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport '../CSS/dev.css';\r\nimport logo from '../phyerwaal_dev_logo_final.png';\r\n\r\nexport default function Developers() {\r\n    return (\r\n        <section id=\"dev-section\">\r\n            <div className=\"header\" align=\"center\">\r\n                <p align=\"center\" className=\"dev\">\r\n                    Developed By\r\n                </p>\r\n                <img src={logo} alt=\"Phyerwaal_Dev\" />\r\n                <Row className=\"dev-details\">\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Tejas Raibagi</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Prasad Jadhav</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Sujoy Dev</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Aseem Godambe</h1>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {\r\n  MDBBtn,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardTitle,\r\n  MDBRow,\r\n  MDBView,\r\n  MDBContainer,\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBInput,\r\n  MDBLink,\r\n} from \"mdbreact\";\r\nimport axios from \"axios\";\r\nimport \"../question.css\";\r\nimport questions from \"../data/questions.json\";\r\nimport options from \"../data/options.json\";\r\nimport logo from \"../Web_bg.png\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Questions extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      current: [0, 1, 2, 3, 4],\r\n      loading: false,\r\n      collapsed: false,\r\n      msg: \"\",\r\n      error: 0,\r\n      selection: questions.map((i, key) => {\r\n        let data = { id: i.id, question: i.question, val: null, select: null };\r\n        return data;\r\n      }),\r\n    };\r\n  }\r\n\r\n  handleTogglerClick = () => {\r\n    const { collapsed } = this.state;\r\n    this.setState({\r\n      collapsed: !collapsed,\r\n    });\r\n  };\r\n\r\n  onClick = (nr) => () => {\r\n    this.setState({\r\n      radio: nr,\r\n    });\r\n  };\r\n  componentWillMount() {\r\n    var xxx = this.shuffle(this.state.selection);\r\n    console.log(xxx);\r\n    this.setState({ selection: xxx });\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.querySelector(\"nav\").style.height = \"65px\";\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.querySelector(\"nav\").style.height = \"auto\";\r\n  }\r\n\r\n  shuffle(arra1) {\r\n    var ctr = arra1.length,\r\n      temp,\r\n      index;\r\n\r\n    while (ctr > 0) {\r\n      index = Math.floor(Math.random() * ctr);\r\n      ctr--;\r\n      temp = arra1[ctr];\r\n      arra1[ctr] = arra1[index];\r\n      arra1[index] = temp;\r\n    }\r\n    return arra1;\r\n  }\r\n\r\n  onChoose = async (id, x, val) => {\r\n    console.log(id, x, val);\r\n    let data = {\r\n      id: parseInt(id),\r\n      val: val,\r\n      question: this.state.selection[x].question,\r\n      select: options[val].opt,\r\n    };\r\n    console.log(data);\r\n    var new_selection = [];\r\n\r\n    await this.state.selection.map((i, key) => {\r\n      if (i.id === data.id) console.log(i);\r\n      i.id == data.id\r\n        ? new_selection.push(data)\r\n        : new_selection.push({\r\n          id: i.id,\r\n          val: i.val,\r\n          question: i.question,\r\n          select: i.select,\r\n        });\r\n    });\r\n    await this.setState({ selection: new_selection });\r\n    console.log(this.state.selection);\r\n  };\r\n\r\n  nextValidate = async () => {\r\n    await this.setState({\r\n      error: 0,\r\n      msg: \"\",\r\n    });\r\n    var err = 0;\r\n    for (var i = 0; i <= this.state.current.length - 1; i++) {\r\n      if (this.state.selection[this.state.current[i]].val == null) {\r\n        err = err + 1;\r\n      }\r\n    }\r\n\r\n    if (err > 0)\r\n      this.setState({\r\n        error: err,\r\n        msg: \"Please fill all the questions.\",\r\n      });\r\n    else\r\n      this.setState({\r\n        error: 0,\r\n        msg: \"\",\r\n      });\r\n  };\r\n\r\n  //Validate questions\r\n  validate = async () => {\r\n    await this.nextValidate();\r\n    console.log(\"Error: \" + this.state.error);\r\n    if (this.state.error == 0) {\r\n      axios\r\n        .post(\"https://phyerwaal-dev-career.herokuapp.com/submit-data\", {\r\n          data: this.state.selection.sort(function (a, b) {\r\n            return a.id - b.id;\r\n          }),\r\n        })\r\n        .then((response) => {\r\n          this.props.storeResponse(response.data);\r\n          this.props.history.push(\"/results\");\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { collapsed } = this.state;\r\n    const navStyle = { marginTop: \"2rem\" };\r\n    const overlay = (\r\n      <div\r\n        id='sidenav-overlay'\r\n        style={{ backgroundColor: \"white\" }}\r\n        onClick={this.handleTogglerClick}\r\n      />\r\n    );\r\n    return (\r\n      <div id='questions'>\r\n        <div className='fadeInDown'>\r\n          <MDBNavbar\r\n            color='secondary-color'\r\n            style={navStyle}\r\n            light\r\n            expand='md'\r\n            scrolling\r\n            transparent\r\n          >\r\n            <MDBContainer>\r\n              <MDBNavbarBrand href='/'>\r\n                <strong>APSIT Career</strong>\r\n              </MDBNavbarBrand>\r\n              <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n              <MDBCollapse isOpen={collapsed} navbar>\r\n                <MDBNavbarNav right>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink to='/'>Home</MDBNavLink>\r\n                  </MDBNavItem>\r\n                  <MDBNavItem>\r\n                    <MDBNavLink to='/dev'>Developers</MDBNavLink>\r\n                  </MDBNavItem>\r\n                </MDBNavbarNav>\r\n              </MDBCollapse>\r\n            </MDBContainer>\r\n          </MDBNavbar>\r\n          {collapsed && overlay}\r\n        </div>\r\n        <MDBView src={logo}>\r\n          <MDBContainer\r\n            style={{ height: \"100%\", width: \"100%\", paddingTop: \"5rem\" }}\r\n            className='d-flex justify-content-center align-items-center'\r\n          >\r\n            <MDBRow>\r\n              <h1\r\n                className='display-10 font-weight-bold question-header fadeInDown'\r\n                style={{ animationDelay: \".2s\" }}\r\n              >\r\n                QUESTIONS\r\n              </h1>\r\n              <MDBCard style={{ width: \"100%\" }}>\r\n                {this.state.selection.map((question, index) => {\r\n                  return (\r\n                    <div\r\n                      className='card fadeInDown'\r\n                      style={\r\n                        this.state.current.includes(index)\r\n                          ? { display: \"block\", animationDelay: \".0s\" }\r\n                          : { display: \"none\", animationDelay: \".0s\" }\r\n                      }\r\n                    >\r\n                      <MDBCardBody>\r\n                        <MDBCardTitle>\r\n                          Q{index + 1}. {question.question}\r\n                        </MDBCardTitle>\r\n                        {options.map((opt, oindex) => {\r\n                          return (\r\n                            <MDBContainer className='mt-3'>\r\n                              <MDBInput\r\n                                key={oindex}\r\n                                required\r\n                                type='radio'\r\n                                label={opt.opt}\r\n                                id={question.id}\r\n                                onClick={(e) => {\r\n                                  this.onChoose(e.target.id, index, opt.val);\r\n                                }}\r\n                                checked={\r\n                                  this.state.selection[index].val == opt.val\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              />\r\n                            </MDBContainer>\r\n                          );\r\n                        })}\r\n                      </MDBCardBody>\r\n                      <hr></hr>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </MDBCard>\r\n              <div\r\n                className='send-btn fadeInDown'\r\n                style={{ animationDelay: \"1s\" }}\r\n              >\r\n                <h5 className='error-msg justify-content-center align-items-center'>\r\n                  {this.state.msg}\r\n                </h5>\r\n                {this.state.current[4] <= 4 ? null : (\r\n                  <MDBBtn\r\n                    color='success'\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        msg: \"\",\r\n                        current: Array.from(this.state.current, (x) => x - 5),\r\n                      });\r\n                    }}\r\n                  >\r\n                    prev\r\n                  </MDBBtn>\r\n                )}\r\n\r\n                {this.state.current[4] >= this.state.selection.length - 1 ? (\r\n                  <MDBBtn color='success' onClick={this.validate}>\r\n                    SEND ANSWER\r\n                  </MDBBtn>\r\n                ) : (\r\n                    <MDBBtn\r\n                      color='success'\r\n                      onClick={async () => {\r\n                        await this.nextValidate();\r\n                        if (this.state.error == 0)\r\n                          await this.setState({\r\n                            current: Array.from(this.state.current, (x) => x + 5),\r\n                          });\r\n                        console.log(this.state.current);\r\n                      }}\r\n                    >\r\n                      next\r\n                    </MDBBtn>\r\n                  )}\r\n              </div>\r\n            </MDBRow>\r\n          </MDBContainer>\r\n        </MDBView>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Dispatch Data to store state\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    storeResponse: (response) => {\r\n      dispatch({ type: \"RES_SUCCESS\", response: response });\r\n    },\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\r\n","import React, { useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { Col } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../CSS/results.css\";\r\nimport { MDBLink, MDBBtn } from \"mdbreact\";\r\n\r\nconst Result = ({ options, series }) => {\r\n  const [result, setResult] = useState();\r\n  // console.log(options);\r\n  return (\r\n    <div className='app' align='center'>\r\n      <Col className='justify-content-center align-items-center'>\r\n        <h1 className='header-title'>Results</h1>\r\n      </Col>\r\n      <Col>\r\n        <div className='mixed-chart'>\r\n          {series ? (\r\n            <Chart options={options} series={series} type='bar' width='500' />\r\n          ) : null}\r\n        </div>\r\n        <p align='center'>\r\n          In the above graph, the probability has been calculated according to\r\n          your answers.\r\n        </p>\r\n        <p align='center'>Please check all the probabilities.</p>\r\n        <MDBLink to='/'>\r\n          <MDBBtn color='success'>HOME</MDBBtn>\r\n        </MDBLink>\r\n      </Col>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  // res: state.res,\r\n  options: state.options,\r\n  series: state.series,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Result);\r\n","import React from \"react\";\r\nimport \"../CSS/userdetails.css\";\r\nimport { Row, Col, Form } from \"react-bootstrap\";\r\nimport {\r\n    MDBBtn,\r\n    MDBNavItem,\r\n    MDBContainer,\r\n    MDBNavbarBrand,\r\n    MDBNavbarToggler,\r\n    MDBNavbar,\r\n    MDBNavLink,\r\n    MDBCollapse,\r\n    MDBNavbarNav,\r\n} from \"mdbreact\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass UserDetails extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            collapsed: false,\r\n            name: \"\",\r\n            email: \"\",\r\n            err: \"\"\r\n        };\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed,\r\n        });\r\n    };\r\n\r\n    changeHandler = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    send = async (event) => {\r\n        this.setState({\r\n            err: \"\"\r\n        })\r\n        console.log(\"Name: \", this.state.name);\r\n        console.log(\"Email: \", this.state.email);\r\n        event.preventDefault();\r\n\r\n        if (this.state.name != \"\" && this.state.email != \"\") {\r\n            let add = [\r\n                {\r\n                    name: this.state.name,\r\n                    email: this.state.email,\r\n                },\r\n            ];\r\n            await this.props.userData(add);\r\n            this.props.history.push(\"/questions\");\r\n            console.log(\"From Redux : \", this.props.user);\r\n        }\r\n        else {\r\n            this.setState({\r\n                err: \"Please check Name and Email fields\"\r\n            })\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.querySelector(\"nav\").style.height = \"65px\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector(\"nav\").style.height = \"auto\";\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: \"2rem\" };\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: \"white\" }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <section id='userDetails'>\r\n                <div className='fadeInDown'>\r\n                    <MDBNavbar\r\n                        color='secondary-color'\r\n                        style={navStyle}\r\n                        light\r\n                        expand='md'\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href='/'>\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/'>Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/dev'>Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <h3 className='header-title fadeInDown' align='center'>\r\n                    Send your details to improve our service\r\n                </h3>\r\n                <Row\r\n                    xs={12}\r\n                    md={3}\r\n                    className='justify-content-center align-items-center'\r\n                >\r\n                    <Col>\r\n                        <Form.Group controlId='formBasicName'>\r\n                            <Form.Label\r\n                                className='fadeInDown'\r\n                                style={{ animationDelay: \"0.2s\" }}\r\n                            >\r\n                                Full Name\r\n                        </Form.Label>\r\n                            <Form.Control\r\n                                className='fadeInDown'\r\n                                style={{ animationDelay: \"0.4s\" }}\r\n                                type='text'\r\n                                placeholder='Full Name'\r\n                                onChange={this.changeHandler}\r\n                                name='name'\r\n                            />\r\n                        </Form.Group>\r\n                        <Form className='login-form'>\r\n                            <Form.Group\r\n                                controlId='formBasicEmail'\r\n                                style={{ animationDelay: \"0.6s\" }}\r\n                            >\r\n                                <Form.Label\r\n                                    className='fadeInDown'\r\n                                    style={{ animationDelay: \"0.6s\" }}\r\n                                >\r\n                                    Email address\r\n                        </Form.Label>\r\n                                <Form.Control\r\n                                    className='fadeInDown'\r\n                                    style={{ animationDelay: \"0.6s\" }}\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    onChange={this.changeHandler}\r\n                                    name='email'\r\n                                />\r\n                                <Form.Text\r\n                                    className='text-muted fadeInDown'\r\n                                    style={{ animationDelay: \"0.8s\" }}\r\n                                >\r\n                                    We'll never share your email with anyone else.\r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <p align=\"center\" className=\"errMsg\">{this.state.err}</p>\r\n                            <p\r\n                                align='center'\r\n                                className='fadeInDown'\r\n                                style={{ animationDelay: \"1.2s\" }}\r\n                            >\r\n                                <MDBBtn color='success' onClick={this.send}>\r\n                                    Submit\r\n                                </MDBBtn>\r\n                            </p>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <p\r\n                    align='center'\r\n                    className='fadeInDown'\r\n                    style={{ animationDelay: \"1.4s\" }}\r\n                >\r\n                    This is an OpenSource project made to help students find their perfect\r\n                    Engg branch and we need your help to improve our model.\r\n        </p>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userData: (user) => {\r\n            dispatch({ type: \"USER_DATA\", user: user });\r\n        },\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserDetails);\r\n","import React from \"react\";\r\nimport Main from \"./Pages/Main\";\r\nimport Developer from \"./Pages/dev\";\r\nimport Questions from \"./Components/Questions\";\r\nimport Results from \"./Components/Result\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport UserDetails from \"./Components/UserDetails\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path='/' component={Main} />\r\n        <Route exact path='/dev' component={Developer} />\r\n        <Route exact path='/questions' component={Questions} />\r\n        <Route exact path='/results' component={Results} />\r\n        <Route exact path='/add_details' component={UserDetails} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { act } from \"react-dom/test-utils\";\r\n\r\nconst initState = {\r\n    options: {\r\n        colors: ['#121212', '#18b64b', '#e68a8c', '#df5f6c', '#dbb593'],\r\n        plotOptions: {\r\n            bar: {\r\n                columnWidth: '45%',\r\n                distributed: true\r\n            }\r\n        },\r\n        chart: {\r\n            toolbar: {\r\n                show: false\r\n            },\r\n            id: \"basic-bar\"\r\n        },\r\n        xaxis: {\r\n            categories: [\"Civil\", \"Computers\", \"EXTC\", \"IT\", \"Mechanical\"]\r\n        }\r\n    },\r\n    series: [\r\n        {\r\n            name: \"Possibilities\",\r\n            data: []\r\n        },\r\n    ],\r\n    user: []\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type == 'RES_SUCCESS') {\r\n        let probab = action.response.probabilities.map((prob) => {\r\n            return Math.round(prob * 100)\r\n        });\r\n        return {\r\n            ...state,\r\n            series: [{\r\n                name: \"Probability % \",\r\n                data: probab,\r\n            }],\r\n        }\r\n    }\r\n    else if (action.type == 'USER_DATA') {\r\n        let userData = action.user;\r\n        return {\r\n            ...state,\r\n            user: userData\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nexport default rootReducer;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./Reducer/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers =\r\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    })\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(...middleware)\r\n  // other store enhancers if any\r\n);\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Web_bg.f2e4e6ab.png\";","module.exports = __webpack_public_path__ + \"static/media/phyerwaal_dev_logo_final.fad90657.png\";"],"sourceRoot":""}