{"version":3,"sources":["Components/Home.js","Pages/Main.js","Pages/dev.js","Components/Questions.js","Components/Result.js","App.js","serviceWorker.js","Reducer/index.js","index.js","Web_bg.png","phyerwaal_dev_logo_final.png"],"names":["Home","state","collapsed","handleTogglerClick","setState","document","querySelector","style","height","this","overlay","id","backgroundColor","onClick","className","color","marginTop","light","expand","fixed","scrolling","transparent","href","isOpen","navbar","right","active","to","src","bg","width","paddingTop","sm","md","animationDelay","fluid","Date","getFullYear","React","Component","Main","Developers","align","logo","alt","Row","Col","Questions","props","nr","radio","onChoose","val","e","a","data","parseInt","target","question","selection","select","options","opt","new_selection","map","i","key","push","validate","error","msg","length","console","log","axios","post","then","response","storeResponse","history","catch","loading","questions","index","oindex","required","type","label","bind","checked","connect","dispatch","series","useState","App","exact","path","component","Developer","Results","Boolean","window","location","hostname","match","initState","colors","plotOptions","bar","columnWidth","distributed","chart","toolbar","show","xaxis","categories","name","rootReducer","action","probab","probabilities","prob","Math","round","middleware","thunk","store","createStore","compose","applyMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.fcb3555f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBNavbarToggler,\r\n    MDBCollapse,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBView,\r\n    MDBContainer,\r\n    MDBFooter,\r\n    MDBLink,\r\n} from 'mdbreact';\r\nimport '../home.css';\r\nimport bg from '../Web_bg.png';\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        collapsed: false\r\n    };\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.querySelector('nav').style.height = '65px';\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector('nav').style.height = 'auto';\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: '2rem' };\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'transparent' }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id='caltoaction'>\r\n                <div className=\"fadeInDown\">\r\n                    <MDBNavbar\r\n                        color='secondary-color'\r\n                        style={navStyle}\r\n                        light\r\n                        expand='md'\r\n                        fixed='top'\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/career/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem active>\r\n                                        <MDBNavLink to='/career/'>Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/career/dev'>Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={bg}>\r\n                    <MDBContainer\r\n                        style={{ height: '100%', width: '100%', paddingTop: '12rem' }}\r\n                        className='d-flex justify-content-center align-items-center'\r\n                    >\r\n                        <MDBRow>\r\n                            <MDBCol sm='4' md='12' className='mb-4 text-center'>\r\n                                <h1 className='display-4 font-weight-bold mb-0 pt-md-5 pt-5 fadeInDown' style={{ animationDelay: '.5s' }}>\r\n                                    Find Your Interested Branch\r\n                                </h1>\r\n                                <h4 className='pt-md-1 pt-sm-2 pt-1 pb-md-3 pb-sm-3 pb-3 fadeInDown' style={{ animationDelay: '.7s' }}>\r\n                                    Confusion is <strong className=\"highlight\">Temporary</strong>, Interest is <strong className=\"highlight\">Permanent</strong>\r\n                                </h4>\r\n                                <MDBLink to=\"/career/questions\">\r\n                                    <MDBBtn color=\"success\" className=\"fadeInDown\" style={{ animationDelay: '1s' }}>Let Us Help</MDBBtn>\r\n                                </MDBLink>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                    <MDBFooter>\r\n                        <div className=\"footer-copyright text-center\" style={{ paddingTop: '8rem' }}>\r\n                            <MDBContainer fluid className=\"fadeInDown\" style={{ animationDelay: '1.2s' }}>\r\n                                &copy; {new Date().getFullYear()} Phyerwaal Dev\r\n                        </MDBContainer>\r\n                        </div>\r\n                    </MDBFooter>\r\n                </MDBView>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Home from '../Components/Home';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div>\r\n            <Home />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport '../CSS/dev.css';\r\nimport logo from '../phyerwaal_dev_logo_final.png';\r\n\r\nexport default function Developers() {\r\n    return (\r\n        <section id=\"dev-section\">\r\n            <div className=\"header\" align=\"center\">\r\n                <p align=\"center\" className=\"dev\">\r\n                    Developed By\r\n                </p>\r\n                <img src={logo} alt=\"Phyerwaal_Dev\" />\r\n                <Row className=\"dev-details\">\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Tejas Raibagi</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Prasad Jadhav</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Sujoy Dev</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Aseem Godambe</h1>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport {\r\n    MDBBtn,\r\n    MDBCard,\r\n    MDBCardBody,\r\n    MDBCardTitle,\r\n    MDBRow,\r\n    MDBView,\r\n    MDBContainer,\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarToggler,\r\n    MDBCollapse,\r\n    MDBNavbarNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBInput,\r\n    MDBLink,\r\n} from \"mdbreact\";\r\nimport axios from 'axios';\r\nimport \"../question.css\";\r\nimport questions from \"../data/questions.json\";\r\nimport options from \"../data/options.json\";\r\nimport logo from \"../Web_bg.png\";\r\nimport { connect } from 'react-redux';\r\n\r\nclass Questions extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: false,\r\n            collapsed: false,\r\n            msg: \"\",\r\n            error: 0,\r\n            selection: questions.map((i, key) => {\r\n                let data = { id: i.id, question: i.question, val: null, select: null };\r\n                return data;\r\n            }),\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed,\r\n        });\r\n    };\r\n\r\n    onClick = (nr) => () => {\r\n        this.setState({\r\n            radio: nr,\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.querySelector(\"nav\").style.height = \"65px\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector(\"nav\").style.height = \"auto\";\r\n    }\r\n\r\n    //Set Answers\r\n    onChoose = async (val, e) => {\r\n        // console.log(this.state.selection);\r\n        let data = { id: parseInt(e.target.id), val: val, question: this.state.selection[parseInt(e.target.id) - 1].question, select: options[val].opt };\r\n        // console.log(data);\r\n        var new_selection = [];\r\n\r\n        await this.state.selection.map((i, key) => {\r\n            i.id == data.id\r\n                ? new_selection.push(data)\r\n                : new_selection.push({ id: i.id, val: i.val, question: i.question, select: i.select });\r\n        });\r\n        await this.setState({ selection: new_selection });\r\n    };\r\n\r\n    //Validate questions\r\n    validate = async () => {\r\n        await this.setState({\r\n            error: 0,\r\n            msg: \"\"\r\n        })\r\n        for (var i = 0; i <= this.state.selection.length - 1; i++) {\r\n            if (this.state.selection[i].val == null) {\r\n                // console.log(this.state.selection[i].id + \" : \" + this.state.selection[i].val);\r\n                // await this.setState({ msg: \"\" });\r\n                this.setState({ msg: \"Please fill all the questions.\" });\r\n                this.setState({ error: this.state.error + 1 });\r\n            }\r\n            // else {\r\n            //     console.log(\" Value is Null for \" + i);\r\n            //     console.log(this.state.selection);\r\n            //     await this.setState({ msg: \"Please fill all the questions.\" });\r\n            //     await this.setState({ error: this.state.error + 1 });\r\n            // }\r\n        }\r\n        console.log(\"Error: \" + this.state.error);\r\n        if (this.state.error == 0) {\r\n            axios.post('https://phyerwaal-dev-career.herokuapp.com/submit-data', {\r\n                data: this.state.selection\r\n            }).then((response) => {\r\n                // console.log(response.data);\r\n                // console.log(\"This :\" + this);\r\n                this.props.storeResponse(response.data);\r\n                this.props.history.push('/career/results');\r\n            }).catch(function (error) {\r\n                //console.log(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: \"2rem\" };\r\n        const overlay = (\r\n            <div\r\n                id=\"sidenav-overlay\"\r\n                style={{ backgroundColor: \"white\" }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id=\"questions\">\r\n                <div className=\"fadeInDown\">\r\n                    <MDBNavbar\r\n                        color=\"secondary-color\"\r\n                        style={navStyle}\r\n                        light\r\n                        expand=\"md\"\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/career/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to=\"/career/\">Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to=\"/career/dev\">Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={logo}>\r\n                    <MDBContainer\r\n                        style={{ height: \"100%\", width: \"100%\", paddingTop: \"5rem\" }}\r\n                        className=\"d-flex justify-content-center align-items-center\"\r\n                    >\r\n                        <MDBRow>\r\n                            <h1\r\n                                className=\"display-10 font-weight-bold question-header fadeInDown\" style={{ animationDelay: \".2s\" }}\r\n                            >\r\n                                QUESTIONS\r\n              </h1>\r\n                            <MDBCard style={{ width: \"100%\" }}>\r\n                                {questions.map((question, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"card fadeInDown\"\r\n                                            style={{ animationDelay: \".4s\" }}\r\n                                        >\r\n                                            <MDBCardBody>\r\n                                                <MDBCardTitle>\r\n                                                    Q{index + 1}. {question.question}\r\n                                                </MDBCardTitle>\r\n                                                {options.map((opt, oindex) => {\r\n                                                    return (\r\n                                                        <MDBContainer className=\"mt-3\">\r\n                                                            <MDBInput key={oindex}\r\n                                                                required\r\n                                                                type=\"radio\"\r\n                                                                label={opt.opt}\r\n                                                                id={question.id}\r\n                                                                onClick={this.onChoose.bind(\r\n                                                                    question.id,\r\n\r\n                                                                    opt.val,\r\n                                                                )}\r\n                                                                checked={\r\n                                                                    this.state.selection[index].val == opt.val\r\n                                                                        ? true\r\n                                                                        : false\r\n                                                                }\r\n                                                            />\r\n                                                        </MDBContainer>\r\n                                                    );\r\n                                                })}\r\n                                            </MDBCardBody>\r\n                                            <hr></hr>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </MDBCard>\r\n                            <div\r\n                                className=\"send-btn fadeInDown\"\r\n                                style={{ animationDelay: \"1s\" }}\r\n                            >\r\n                                <h5 className=\"error-msg justify-content-center align-items-center\">{this.state.msg}</h5>\r\n                                <MDBBtn color=\"success\" onClick={this.validate}>SEND ANSWER</MDBBtn>\r\n\r\n\r\n                            </div>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                </MDBView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//Dispatch Data to store state\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        storeResponse: (response) => { dispatch({ type: 'RES_SUCCESS', response: response }) },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(Questions);","import React, { useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { Col } from \"reactstrap\";\r\nimport { connect } from 'react-redux';\r\nimport '../CSS/results.css';\r\nimport { MDBLink, MDBBtn } from \"mdbreact\";\r\n\r\nconst Result = ({ options, series }) => {\r\n    const [result, setResult] = useState();\r\n    // console.log(options);\r\n    return (\r\n        <div className=\"app\" align=\"center\">\r\n            <Col className=\"justify-content-center align-items-center\">\r\n                <h1 className=\"header-title\">Results</h1>\r\n            </Col>\r\n            <Col>\r\n                <div className=\"mixed-chart\">\r\n                    {series ?\r\n                        <Chart\r\n                            options={options}\r\n                            series={series}\r\n                            type=\"bar\"\r\n                            width=\"500\"\r\n                        />\r\n                        : null\r\n                    }\r\n\r\n                </div>\r\n                <p align=\"center\">In the above graph, the probability has been calculated according to your answers.</p>\r\n                <p align='center'>Please check all the probabilities.</p>\r\n                <MDBLink to='/career/'>\r\n                    <MDBBtn color=\"success\">HOME</MDBBtn>\r\n                </MDBLink>\r\n            </Col>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // res: state.res,\r\n    options: state.options,\r\n    series: state.series,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Result);\r\n","import React from 'react';\nimport Main from './Pages/Main';\nimport Developer from './Pages/dev';\nimport Questions from './Components/Questions';\nimport Results from './Components/Result';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/career/\" component={Main} />\n        <Route exact path=\"/career/dev\" component={Developer} />\n        <Route exact path=\"/career/questions\" component={Questions} />\n        <Route exact path=\"/career/results\" component={Results} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    options: {\r\n        colors: ['#121212', '#18b64b', '#e68a8c', '#df5f6c', '#dbb593'],\r\n        plotOptions: {\r\n            bar: {\r\n                columnWidth: '45%',\r\n                distributed: true\r\n            }\r\n        },\r\n        chart: {\r\n            toolbar: {\r\n                show: false\r\n            },\r\n            id: \"basic-bar\"\r\n        },\r\n        xaxis: {\r\n            categories: [\"Civil\", \"Computers\", \"EXTC\", \"IT\", \"Mechanical\"]\r\n        }\r\n    },\r\n    series: [\r\n        {\r\n            name: \"Possibilities\",\r\n            data: []\r\n        },\r\n    ],\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type == 'RES_SUCCESS') {\r\n        // console.log(\"Action : \", action.response.probabilities.map((prob, index) => {\r\n        //     return prob * 100\r\n        // }));\r\n        let probab = action.response.probabilities.map((prob, index) => {\r\n            return Math.round(prob * 100)\r\n        });\r\n        // let resp = action.response;\r\n        return {\r\n            ...state,\r\n            series: [{\r\n                name: \"Probability % \",\r\n                data: probab,\r\n            }],\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport rootReducer from './Reducer/index';\nimport thunk from 'redux-thunk';\n\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(...middleware),\n)\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Web_bg.f2e4e6ab.png\";","module.exports = __webpack_public_path__ + \"static/media/phyerwaal_dev_logo_final.fad90657.png\";"],"sourceRoot":""}