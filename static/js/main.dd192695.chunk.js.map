{"version":3,"sources":["Web_bg.png","phyerwaal_dev_logo_final.png","Components/Home.js","Pages/Main.js","Pages/dev.js","Components/Questions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CallToActionIntro","state","collapsed","handleTogglerClick","setState","document","querySelector","style","height","this","overlay","id","backgroundColor","onClick","className","color","marginTop","light","expand","fixed","scrolling","transparent","href","isOpen","navbar","right","active","to","src","logo","width","paddingTop","sm","md","animationDelay","fluid","Date","getFullYear","React","Component","Main","Home","Developers","align","alt","Row","Col","Questions","selection","questions","map","i","key","val","nr","radio","onChoose","e","a","data","parseInt","target","new_selection","push","question","index","options","opt","oindex","bind","checked","label","type","App","exact","path","component","Developer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd192695.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Web_bg.f2e4e6ab.png\";","module.exports = __webpack_public_path__ + \"static/media/phyerwaal_dev_logo_final.fad90657.png\";","import React from 'react';\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBNavbarToggler,\r\n    MDBCollapse,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBView,\r\n    MDBContainer,\r\n    MDBFooter,\r\n    MDBLink,\r\n} from 'mdbreact';\r\nimport '../home.css';\r\nimport logo from '../Web_bg.png';\r\n\r\nclass CallToActionIntro extends React.Component {\r\n    state = {\r\n        collapsed: false\r\n    };\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.querySelector('nav').style.height = '65px';\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector('nav').style.height = 'auto';\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: '2rem' };\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'transparent' }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id='caltoaction'>\r\n                <div className=\"fadeInDown\">\r\n                    <MDBNavbar\r\n                        color='secondary-color'\r\n                        style={navStyle}\r\n                        light\r\n                        expand='md'\r\n                        fixed='top'\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/career/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem active>\r\n                                        <MDBNavLink to='/career/'>Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/career/dev'>Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={logo}>\r\n                    <MDBContainer\r\n                        style={{ height: '100%', width: '100%', paddingTop: '12rem' }}\r\n                        className='d-flex justify-content-center align-items-center'\r\n                    >\r\n                        <MDBRow>\r\n                            <MDBCol sm='4' md='12' className='mb-4 text-center'>\r\n                                <h1 className='display-4 font-weight-bold mb-0 pt-md-5 pt-5 fadeInDown' style={{ animationDelay: '.5s' }}>\r\n                                    Find Your Interested Branch\r\n                                </h1>\r\n                                <h4 className='pt-md-1 pt-sm-2 pt-1 pb-md-3 pb-sm-3 pb-3 fadeInDown' style={{ animationDelay: '.7s' }}>\r\n                                    Confusion is <strong>Temperary</strong>, Interest is <strong>Permanent</strong>\r\n                                </h4>\r\n                                <MDBLink to=\"/career/questions\">\r\n                                    <MDBBtn color=\"success\" className=\"fadeInDown\" style={{ animationDelay: '1s' }}>Let Us Help</MDBBtn>\r\n                                </MDBLink>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                    <MDBFooter>\r\n                        <div className=\"footer-copyright text-center\" style={{ paddingTop: '8rem' }}>\r\n                            <MDBContainer fluid className=\"fadeInDown\" style={{ animationDelay: '1.2s' }}>\r\n                                &copy; {new Date().getFullYear()} Phyerwaal Dev\r\n                        </MDBContainer>\r\n                        </div>\r\n                    </MDBFooter>\r\n                </MDBView>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default CallToActionIntro;","import React from 'react';\r\nimport Home from '../Components/Home';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div>\r\n            <Home />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport '../CSS/dev.css';\r\nimport logo from '../phyerwaal_dev_logo_final.png';\r\n\r\nexport default function Developers() {\r\n    return (\r\n        <section id=\"dev-section\">\r\n            <div className=\"header\" align=\"center\">\r\n                <p align=\"center\" className=\"dev\">\r\n                    Developed By\r\n                </p>\r\n                <img src={logo} alt=\"Phyerwaal_Dev\" />\r\n                <Row className=\"dev-details\">\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Tejas Raibagi</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Prasad Jadhav</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Sujoy Dev</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Aseem Godambe</h1>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React from \"react\";\r\nimport {\r\n    MDBBtn,\r\n    MDBCard,\r\n    MDBCardBody,\r\n    MDBCardTitle,\r\n    MDBRow,\r\n    MDBView,\r\n    MDBContainer,\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarToggler,\r\n    MDBCollapse,\r\n    MDBNavbarNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBInput,\r\n} from \"mdbreact\";\r\nimport \"../question.css\";\r\nimport questions from \"../data/questions.json\";\r\nimport options from \"../data/options.json\";\r\nimport logo from \"../Web_bg.png\";\r\n\r\nclass Questions extends React.Component {\r\n    state = {\r\n        collapsed: false,\r\n        selection: questions.map((i, key) => {\r\n            let data = { id: i.id, val: null };\r\n            return data;\r\n        }),\r\n    };\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed,\r\n        });\r\n    };\r\n\r\n    onClick = (nr) => () => {\r\n        this.setState({\r\n            radio: nr,\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        // questions.map((i, key) => {\r\n        //   let data = { id: i.id, val: null };\r\n        //   this.setState((prevState) => ({\r\n        //     selection: [...prevState.selection, data],\r\n        //   }));\r\n        // });\r\n        document.querySelector(\"nav\").style.height = \"65px\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector(\"nav\").style.height = \"auto\";\r\n    }\r\n\r\n    onChoose = async (val, e) => {\r\n        let data = { id: parseInt(e.target.id), val: val };\r\n        var new_selection = [];\r\n\r\n        await this.state.selection.map((i, key) => {\r\n            i.id == data.id\r\n                ? new_selection.push(data)\r\n                : new_selection.push({ id: i.id, val: i.val });\r\n        });\r\n        await this.setState({ selection: new_selection });\r\n    };\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: \"2rem\" };\r\n        const overlay = (\r\n            <div\r\n                id=\"sidenav-overlay\"\r\n                style={{ backgroundColor: \"white\" }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id=\"questions\">\r\n                <div className=\"fadeInDown\">\r\n                    <MDBNavbar\r\n                        color=\"secondary-color\"\r\n                        style={navStyle}\r\n                        light\r\n                        expand=\"md\"\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/career/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to=\"/career/\">Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to=\"/career/dev\">Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={logo}>\r\n                    <MDBContainer\r\n                        style={{ height: \"100%\", width: \"100%\", paddingTop: \"5rem\" }}\r\n                        className=\"d-flex justify-content-center align-items-center\"\r\n                    >\r\n                        <MDBRow>\r\n                            <h1\r\n                                className=\"display-10 font-weight-bold question-header\"\r\n                            >\r\n                                QUESTIONS\r\n              </h1>\r\n                            <MDBCard style={{ width: \"100%\" }}>\r\n                                {questions.map((question, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"card fadeInDown\"\r\n                                            style={{ animationDelay: \".4s\" }}\r\n                                        >\r\n                                            <MDBCardBody>\r\n                                                <MDBCardTitle>\r\n                                                    Q{index + 1}. {question.question}\r\n                                                </MDBCardTitle>\r\n                                                {options.map((opt, oindex) => {\r\n                                                    return (\r\n                                                        <MDBContainer className=\"mt-3\">\r\n                                                            <MDBInput\r\n                                                                id={question.id}\r\n                                                                onClick={this.onChoose.bind(\r\n                                                                    question.id,\r\n                                                                    opt.val\r\n                                                                )}\r\n                                                                checked={\r\n                                                                    this.state.selection[index].val === opt.val\r\n                                                                        ? true\r\n                                                                        : false\r\n                                                                }\r\n                                                                label={opt.opt}\r\n                                                                type=\"radio\"\r\n                                                            />\r\n                                                        </MDBContainer>\r\n                                                    );\r\n                                                })}\r\n                                            </MDBCardBody>\r\n                                            <hr></hr>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </MDBCard>\r\n                            <div\r\n                                className=\"send-btn fadeInDown\"\r\n                                style={{ animationDelay: \"1s\" }}\r\n                            >\r\n                                <MDBBtn color=\"success\">SEND ANSWER</MDBBtn>\r\n                            </div>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                </MDBView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;","import React from 'react';\nimport Main from './Pages/Main';\nimport Developer from './Pages/dev';\nimport Questions from './Components/Questions';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/career/\" component={Main} />\n        <Route exact path=\"/career/dev\" component={Developer} />\n        <Route exact path=\"/career/questions\" component={Questions} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}