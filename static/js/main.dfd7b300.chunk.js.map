{"version":3,"sources":["Components/Home.js","Pages/Main.js","Pages/dev.js","Components/Questions.js","Components/Result.js","Components/UserDetails.js","App.js","serviceWorker.js","Reducer/index.js","index.js","Web_bg.png","phyerwaal_dev_logo_final.png"],"names":["Home","state","collapsed","handleTogglerClick","setState","document","querySelector","style","height","this","overlay","id","backgroundColor","onClick","color","marginTop","light","expand","fixed","scrolling","transparent","href","isOpen","navbar","right","active","to","src","bg","width","paddingTop","className","sm","md","animationDelay","fluid","Date","getFullYear","React","Component","Main","Developers","align","logo","alt","Row","Col","Questions","props","nr","radio","onChoose","x","val","a","console","log","data","parseInt","question","selection","select","options","opt","new_selection","map","i","key","push","nextValidate","error","msg","err","current","length","validate","axios","post","sort","b","then","response","storeResponse","history","catch","loading","questions","xxx","shuffle","arra1","temp","index","ctr","Math","floor","random","includes","display","oindex","required","type","label","e","target","checked","Array","from","connect","user","dispatch","series","useState","UserDetails","changeHandler","event","name","value","send","email","preventDefault","add","userData","bind","xs","Form","Group","controlId","Label","Control","placeholder","onChange","Text","App","exact","path","component","Developer","Results","Boolean","window","location","hostname","match","initState","colors","plotOptions","bar","columnWidth","distributed","chart","toolbar","show","xaxis","categories","rootReducer","action","probab","probabilities","prob","round","middleware","thunk","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.dfd7b300.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBNavbarToggler,\r\n    MDBCollapse,\r\n    MDBRow,\r\n    MDBCol,\r\n    MDBBtn,\r\n    MDBView,\r\n    MDBContainer,\r\n    MDBFooter,\r\n    MDBLink,\r\n} from 'mdbreact';\r\nimport '../home.css';\r\nimport bg from '../Web_bg.png';\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        collapsed: false\r\n    };\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.querySelector('nav').style.height = '65px';\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector('nav').style.height = 'auto';\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: '2rem' };\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'transparent' }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id='caltoaction'>\r\n                <div>\r\n                    <MDBNavbar\r\n                        color='secondary-color'\r\n                        style={navStyle}\r\n                        light\r\n                        expand='md'\r\n                        fixed='top'\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/career/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem active>\r\n                                        <MDBNavLink to='/career/'>Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/career/dev'>Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={bg}>\r\n                    <MDBContainer\r\n                        style={{ height: '100%', width: '100%', paddingTop: '12rem' }}\r\n                        className='d-flex justify-content-center align-items-center'\r\n                    >\r\n                        <MDBRow>\r\n                            <MDBCol sm='4' md='12' className='mb-4 text-center'>\r\n                                <h1 className='display-4 font-weight-bold mb-0 pt-md-5 pt-5 fadeInDown' style={{ animationDelay: '.5s' }}>\r\n                                    Find Your Interested Branch\r\n                                </h1>\r\n                                <h4 className='pt-md-1 pt-sm-2 pt-1 pb-md-3 pb-sm-3 pb-3 fadeInDown' style={{ animationDelay: '.7s' }}>\r\n                                    Confusion is <strong className=\"highlight\">Temporary</strong>, Interest is <strong className=\"highlight\">Permanent</strong>\r\n                                </h4>\r\n                                <MDBLink to=\"/career/add_details\">\r\n                                    <MDBBtn color=\"success\" className=\"fadeInDown\" style={{ animationDelay: '1s' }}>Let Us Help</MDBBtn>\r\n                                </MDBLink>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                    <MDBFooter>\r\n                        <div className=\"footer-copyright text-center\" style={{ paddingTop: '8rem' }}>\r\n                            <MDBContainer fluid className=\"fadeInDown\" style={{ animationDelay: '1.2s' }}>\r\n                                &copy; {new Date().getFullYear()} Phyerwaal Dev\r\n                        </MDBContainer>\r\n                        </div>\r\n                    </MDBFooter>\r\n                </MDBView>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Home from '../Components/Home';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div>\r\n            <Home />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { Row, Col } from 'reactstrap';\r\nimport '../CSS/dev.css';\r\nimport logo from '../phyerwaal_dev_logo_final.png';\r\n\r\nexport default function Developers() {\r\n    return (\r\n        <section id=\"dev-section\">\r\n            <div className=\"header\" align=\"center\">\r\n                <p align=\"center\" className=\"dev\">\r\n                    Developed By\r\n                </p>\r\n                <img src={logo} alt=\"Phyerwaal_Dev\" />\r\n                <Row className=\"dev-details\">\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Tejas Raibagi</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Prasad Jadhav</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Sujoy Dev</h1>\r\n                    </Col>\r\n                    <Col sm={12} md={3}>\r\n                        <h1 className=\"name\">Aseem Godambe</h1>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </section>\r\n    );\r\n}","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {\r\n    MDBBtn,\r\n    MDBCard,\r\n    MDBCardBody,\r\n    MDBCardTitle,\r\n    MDBRow,\r\n    MDBView,\r\n    MDBContainer,\r\n    MDBNavbar,\r\n    MDBNavbarBrand,\r\n    MDBNavbarToggler,\r\n    MDBCollapse,\r\n    MDBNavbarNav,\r\n    MDBNavItem,\r\n    MDBNavLink,\r\n    MDBInput,\r\n    MDBLink,\r\n} from \"mdbreact\";\r\nimport axios from \"axios\";\r\nimport \"../question.css\";\r\nimport questions from \"../data/questions.json\";\r\nimport options from \"../data/options.json\";\r\nimport logo from \"../Web_bg.png\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Questions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            current: [0, 1, 2, 3, 4],\r\n            loading: false,\r\n            collapsed: false,\r\n            msg: \"\",\r\n            error: 0,\r\n            selection: questions.map((i, key) => {\r\n                let data = { id: i.id, question: i.question, val: null, select: null };\r\n                return data;\r\n            }),\r\n        };\r\n    }\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed,\r\n        });\r\n    };\r\n\r\n    onClick = (nr) => () => {\r\n        this.setState({\r\n            radio: nr,\r\n        });\r\n    };\r\n    componentWillMount() {\r\n        var xxx = this.shuffle(this.state.selection);\r\n        console.log(xxx);\r\n        this.setState({ selection: xxx });\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.querySelector(\"nav\").style.height = \"65px\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector(\"nav\").style.height = \"auto\";\r\n    }\r\n\r\n    shuffle(arra1) {\r\n        var ctr = arra1.length,\r\n            temp,\r\n            index;\r\n\r\n        while (ctr > 0) {\r\n            index = Math.floor(Math.random() * ctr);\r\n            ctr--;\r\n            temp = arra1[ctr];\r\n            arra1[ctr] = arra1[index];\r\n            arra1[index] = temp;\r\n        }\r\n        return arra1;\r\n    }\r\n\r\n    onChoose = async (id, x, val) => {\r\n        console.log(id, x, val);\r\n        let data = {\r\n            id: parseInt(id),\r\n            val: val,\r\n            question: this.state.selection[x].question,\r\n            select: options[val].opt,\r\n        };\r\n        console.log(data);\r\n        var new_selection = [];\r\n\r\n        await this.state.selection.map((i, key) => {\r\n            if (i.id === data.id) console.log(i);\r\n            i.id == data.id\r\n                ? new_selection.push(data)\r\n                : new_selection.push({\r\n                    id: i.id,\r\n                    val: i.val,\r\n                    question: i.question,\r\n                    select: i.select,\r\n                });\r\n        });\r\n        await this.setState({ selection: new_selection });\r\n        console.log(this.state.selection);\r\n    };\r\n\r\n    nextValidate = async () => {\r\n        await this.setState({\r\n            error: 0,\r\n            msg: \"\",\r\n        });\r\n        var err = 0;\r\n        for (var i = 0; i <= this.state.current.length - 1; i++) {\r\n            if (this.state.selection[this.state.current[i]].val == null) {\r\n                err = err + 1;\r\n            }\r\n        }\r\n\r\n        if (err > 0)\r\n            this.setState({\r\n                error: err,\r\n                msg: \"Please fill all the questions.\",\r\n            });\r\n        else\r\n            this.setState({\r\n                error: 0,\r\n                msg: \"\",\r\n            });\r\n    };\r\n\r\n    //Validate questions\r\n    validate = async () => {\r\n        // await this.setState({\r\n        //   error: 0,\r\n        //   msg: \"\",\r\n        // });\r\n        // var err = 0;\r\n        // for (var i = 0; i <= this.state.selection.length - 1; i++) {\r\n        //   if (this.state.selection[i].val == null) {\r\n        //     err = err + 1;\r\n        //   }\r\n        // }\r\n\r\n        // if (err > 0)\r\n        //   this.setState({\r\n        //     error: err,\r\n        //     msg: \"Please fill all the questions.\",\r\n        //   });\r\n        await this.nextValidate();\r\n        console.log(\"Error: \" + this.state.error);\r\n        if (this.state.error == 0) {\r\n            axios\r\n                .post(\"https://phyerwaal-dev-career.herokuapp.com/submit-data\", {\r\n                    data: this.state.selection.sort(function (a, b) {\r\n                        return a.id - b.id;\r\n                    }),\r\n                })\r\n                .then((response) => {\r\n                    this.props.storeResponse(response.data);\r\n                    this.props.history.push(\"/career/results\");\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: \"2rem\" };\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: \"white\" }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n        return (\r\n            <div id='questions'>\r\n                <div className='fadeInDown'>\r\n                    <MDBNavbar\r\n                        color='secondary-color'\r\n                        style={navStyle}\r\n                        light\r\n                        expand='md'\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href='/career/'>\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/career/'>Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to='/career/dev'>Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <MDBView src={logo}>\r\n                    <MDBContainer\r\n                        style={{ height: \"100%\", width: \"100%\", paddingTop: \"5rem\" }}\r\n                        className='d-flex justify-content-center align-items-center'\r\n                    >\r\n                        <MDBRow>\r\n                            <h1\r\n                                className='display-10 font-weight-bold question-header fadeInDown'\r\n                                style={{ animationDelay: \".2s\" }}\r\n                            >\r\n                                QUESTIONS\r\n              </h1>\r\n                            <MDBCard style={{ width: \"100%\" }}>\r\n                                {this.state.selection.map((question, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className='card fadeInDown'\r\n                                            style={\r\n                                                this.state.current.includes(index)\r\n                                                    ? { display: \"block\", animationDelay: \".0s\" }\r\n                                                    : { display: \"none\", animationDelay: \".0s\" }\r\n                                            }\r\n                                        >\r\n                                            <MDBCardBody>\r\n                                                <MDBCardTitle>\r\n                                                    Q{index + 1}. {question.question}\r\n                                                </MDBCardTitle>\r\n                                                {options.map((opt, oindex) => {\r\n                                                    return (\r\n                                                        <MDBContainer className='mt-3'>\r\n                                                            <MDBInput\r\n                                                                key={oindex}\r\n                                                                required\r\n                                                                type='radio'\r\n                                                                label={opt.opt}\r\n                                                                id={question.id}\r\n                                                                onClick={(e) => {\r\n                                                                    this.onChoose(e.target.id, index, opt.val);\r\n                                                                }}\r\n                                                                checked={\r\n                                                                    this.state.selection[index].val == opt.val\r\n                                                                        ? true\r\n                                                                        : false\r\n                                                                }\r\n                                                            />\r\n                                                        </MDBContainer>\r\n                                                    );\r\n                                                })}\r\n                                            </MDBCardBody>\r\n                                            <hr></hr>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </MDBCard>\r\n                            <div\r\n                                className='send-btn fadeInDown'\r\n                                style={{ animationDelay: \"1s\" }}\r\n                            >\r\n                                <h5 className='error-msg justify-content-center align-items-center'>\r\n                                    {this.state.msg}\r\n                                </h5>\r\n                                {this.state.current[4] <= 4 ? null : (\r\n                                    <MDBBtn\r\n                                        color='success'\r\n                                        onClick={() => {\r\n                                            this.setState({\r\n                                                msg: \"\",\r\n                                                current: Array.from(this.state.current, (x) => x - 5),\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        prev\r\n                                    </MDBBtn>\r\n                                )}\r\n\r\n                                {this.state.current[4] >= this.state.selection.length - 1 ? (\r\n                                    <MDBBtn color='success' onClick={this.validate}>\r\n                                        SEND ANSWER\r\n                                    </MDBBtn>\r\n                                ) : (\r\n                                        <MDBBtn\r\n                                            color='success'\r\n                                            onClick={async () => {\r\n                                                await this.nextValidate();\r\n                                                if (this.state.error == 0)\r\n                                                    await this.setState({\r\n                                                        current: Array.from(this.state.current, (x) => x + 5),\r\n                                                    });\r\n                                                console.log(this.state.current);\r\n                                            }}\r\n                                        >\r\n                                            next\r\n                                        </MDBBtn>\r\n                                    )}\r\n                            </div>\r\n                        </MDBRow>\r\n                    </MDBContainer>\r\n                </MDBView>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//Dispatch Data to store state\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        storeResponse: (response) => {\r\n            dispatch({ type: \"RES_SUCCESS\", response: response });\r\n        },\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\r\n","import React, { useState } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { Col } from \"reactstrap\";\r\nimport { connect } from 'react-redux';\r\nimport '../CSS/results.css';\r\nimport { MDBLink, MDBBtn } from \"mdbreact\";\r\n\r\nconst Result = ({ options, series }) => {\r\n    const [result, setResult] = useState();\r\n    // console.log(options);\r\n    return (\r\n        <div className=\"app\" align=\"center\">\r\n            <Col className=\"justify-content-center align-items-center\">\r\n                <h1 className=\"header-title\">Results</h1>\r\n            </Col>\r\n            <Col>\r\n                <div className=\"mixed-chart\">\r\n                    {series ?\r\n                        <Chart\r\n                            options={options}\r\n                            series={series}\r\n                            type=\"bar\"\r\n                            width=\"500\"\r\n                        />\r\n                        : null\r\n                    }\r\n\r\n                </div>\r\n                <p align=\"center\">In the above graph, the probability has been calculated according to your answers.</p>\r\n                <p align='center'>Please check all the probabilities.</p>\r\n                <MDBLink to='/career/'>\r\n                    <MDBBtn color=\"success\">HOME</MDBBtn>\r\n                </MDBLink>\r\n            </Col>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // res: state.res,\r\n    options: state.options,\r\n    series: state.series,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Result);\r\n","import React from 'react';\r\nimport '../CSS/userdetails.css';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport { MDBBtn, MDBNavItem, MDBContainer, MDBNavbarBrand, MDBNavbarToggler, MDBNavbar, MDBNavLink, MDBCollapse, MDBNavbarNav } from 'mdbreact';\r\nimport { connect } from 'react-redux';\r\n\r\nclass UserDetails extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            collapsed: false,\r\n            name: \"\",\r\n            email: \"\"\r\n        }\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    handleTogglerClick = () => {\r\n        const { collapsed } = this.state;\r\n        this.setState({\r\n            collapsed: !collapsed,\r\n        });\r\n    };\r\n\r\n    changeHandler = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    send = async (event) => {\r\n        console.log(\"Name: \", this.state.name);\r\n        console.log(\"Email: \", this.state.email);\r\n        event.preventDefault();\r\n        let add = [{\r\n            name: this.state.name,\r\n            email: this.state.email\r\n        }]\r\n        await this.props.userData(add);\r\n        this.props.history.push(\"/career/questions\");\r\n        console.log(\"From Redux : \", this.props.user);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.querySelector(\"nav\").style.height = \"65px\";\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector(\"nav\").style.height = \"auto\";\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        const navStyle = { marginTop: \"2rem\" };\r\n        const overlay = (\r\n            <div\r\n                id=\"sidenav-overlay\"\r\n                style={{ backgroundColor: \"white\" }}\r\n                onClick={this.handleTogglerClick}\r\n            />\r\n        );\r\n\r\n        return (\r\n            <section id='userDetails'>\r\n                <div className=\"fadeInDown\">\r\n                    <MDBNavbar\r\n                        color=\"secondary-color\"\r\n                        style={navStyle}\r\n                        light\r\n                        expand=\"md\"\r\n                        scrolling\r\n                        transparent\r\n                    >\r\n                        <MDBContainer>\r\n                            <MDBNavbarBrand href=\"/career/\">\r\n                                <strong>APSIT Career</strong>\r\n                            </MDBNavbarBrand>\r\n                            <MDBNavbarToggler onClick={this.handleTogglerClick} />\r\n                            <MDBCollapse isOpen={collapsed} navbar>\r\n                                <MDBNavbarNav right>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to=\"/career/\">Home</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                    <MDBNavItem>\r\n                                        <MDBNavLink to=\"/career/dev\">Developers</MDBNavLink>\r\n                                    </MDBNavItem>\r\n                                </MDBNavbarNav>\r\n                            </MDBCollapse>\r\n                        </MDBContainer>\r\n                    </MDBNavbar>\r\n                    {collapsed && overlay}\r\n                </div>\r\n                <h3 className=\"header-title fadeInDown\" align=\"center\">Send your details to improve our service</h3>\r\n                <Row xs={12} md={3} className=\"justify-content-center align-items-center\">\r\n                    <Col>\r\n                        <Form.Group controlId=\"formBasicName\">\r\n                            <Form.Label className=\"fadeInDown\" style={{ animationDelay: \"0.2s\" }}>Full Name</Form.Label>\r\n                            <Form.Control className=\"fadeInDown\" style={{ animationDelay: \"0.4s\" }} type=\"text\" placeholder=\"Full Name\" onChange={this.changeHandler} name=\"name\" />\r\n                        </Form.Group>\r\n                        <Form className=\"login-form\">\r\n                            <Form.Group controlId=\"formBasicEmail\" style={{ animationDelay: \"0.6s\" }}>\r\n                                <Form.Label className=\"fadeInDown\" style={{ animationDelay: \"0.6s\" }}>Email address</Form.Label>\r\n                                <Form.Control className=\"fadeInDown\" style={{ animationDelay: \"0.6s\" }} type=\"email\" placeholder=\"Enter Email\" onChange={this.changeHandler} name=\"email\" />\r\n                                <Form.Text className=\"text-muted fadeInDown\" style={{ animationDelay: \"0.8s\" }}>\r\n                                    We'll never share your email with anyone else.\r\n                        </Form.Text>\r\n                            </Form.Group>\r\n                            <p align=\"center\" className=\"fadeInDown\" style={{ animationDelay: \"1.2s\" }}>\r\n                                <MDBBtn color=\"success\" onClick={this.send}>\r\n                                    Submit\r\n                                </MDBBtn>\r\n                            </p>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <p align=\"center\" className=\"fadeInDown\" style={{ animationDelay: \"1.4s\" }}>This is an OpenSource project made to help students find their perfect Engg branch and we need your help to improve our model.</p >\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userData: (user) => { dispatch({ type: 'USER_DATA', user: user }) },\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserDetails);","import React from 'react';\nimport Main from './Pages/Main';\nimport Developer from './Pages/dev';\nimport Questions from './Components/Questions';\nimport Results from './Components/Result';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport UserDetails from './Components/UserDetails';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/career/\" component={Main} />\n        <Route exact path=\"/career/dev\" component={Developer} />\n        <Route exact path=\"/career/questions\" component={Questions} />\n        <Route exact path=\"/career/results\" component={Results} />\n        <Route exact path=\"/career/add_details\" component={UserDetails} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { act } from \"react-dom/test-utils\";\r\n\r\nconst initState = {\r\n    options: {\r\n        colors: ['#121212', '#18b64b', '#e68a8c', '#df5f6c', '#dbb593'],\r\n        plotOptions: {\r\n            bar: {\r\n                columnWidth: '45%',\r\n                distributed: true\r\n            }\r\n        },\r\n        chart: {\r\n            toolbar: {\r\n                show: false\r\n            },\r\n            id: \"basic-bar\"\r\n        },\r\n        xaxis: {\r\n            categories: [\"Civil\", \"Computers\", \"EXTC\", \"IT\", \"Mechanical\"]\r\n        }\r\n    },\r\n    series: [\r\n        {\r\n            name: \"Possibilities\",\r\n            data: []\r\n        },\r\n    ],\r\n    user: []\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type == 'RES_SUCCESS') {\r\n        let probab = action.response.probabilities.map((prob) => {\r\n            return Math.round(prob * 100)\r\n        });\r\n        return {\r\n            ...state,\r\n            series: [{\r\n                name: \"Probability % \",\r\n                data: probab,\r\n            }],\r\n        }\r\n    }\r\n    else if (action.type == 'USER_DATA') {\r\n        let userData = action.user;\r\n        return {\r\n            ...state,\r\n            user: userData\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nexport default rootReducer;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./Reducer/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers =\r\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    })\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(...middleware)\r\n  // other store enhancers if any\r\n);\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Web_bg.f2e4e6ab.png\";","module.exports = __webpack_public_path__ + \"static/media/phyerwaal_dev_logo_final.fad90657.png\";"],"sourceRoot":""}